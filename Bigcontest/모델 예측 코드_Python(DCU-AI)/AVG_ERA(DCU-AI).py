# -*- coding: utf-8 -*-
"""LSTM_hitter_FINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R5vPmBaITQ8NpKtIwjUWU-uiAvGzEDUO
"""

from google.colab import drive
drive.mount('/content/drive')

import os

#change path
root_dir = "/content/drive/My Drive/"
base_dir = root_dir + 'kbo'
os.chdir(base_dir)

#mount google driver
#from google.colab import drive
#drive.mount('/content/gdrive', force_remount=True)
#root_dir = "/content/gdrive/My Drive/"

!pwd

import pathlib
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense, Dropout, LSTM, BatchNormalization


print(tf.__version__)

df_2016 = pd.read_csv('/content/drive/My Drive/kbo/kbo_2016.csv')
df_2017 = pd.read_csv('/content/drive/My Drive/kbo/kbo_2017.csv')
df_2018 = pd.read_csv('/content/drive/My Drive/kbo/kbo_2018.csv')
df_2019 = pd.read_csv('/content/drive/My Drive/kbo/kbo_2019.csv')
df_2020 = pd.read_csv('/content/drive/My Drive/kbo/kbo_2020.csv')

"""### 지표 값 0~1사이로 만들기"""

df_2016['AB'] = df_2016['AB'] / 100
df_2016['HIT'] = df_2016['HIT'] / 100
df_2016['RUN'] = df_2016['RUN'] / 100
df_2016['INN2'] = df_2016['INN2'] / 100
df_2016['ER'] = df_2016['ER'] / 100
df_2016['R'] = df_2016['R'] / 100

df_2017['AB'] = df_2017['AB'] / 100
df_2017['HIT'] = df_2017['HIT'] / 100
df_2017['RUN'] = df_2017['RUN'] / 100
df_2017['INN2'] = df_2017['INN2'] / 100
df_2017['ER'] = df_2017['ER'] / 100
df_2017['R'] = df_2017['R'] / 100

df_2018['AB'] = df_2018['AB'] / 100
df_2018['HIT'] = df_2018['HIT'] / 100
df_2018['RUN'] = df_2018['RUN'] / 100
df_2018['INN2'] = df_2018['INN2'] / 100
df_2018['ER'] = df_2018['ER'] / 100
df_2018['R'] = df_2018['R'] / 100

df_2019['AB'] = df_2019['AB'] / 100
df_2019['HIT'] = df_2019['HIT'] / 100
df_2019['RUN'] = df_2019['RUN'] / 100
df_2019['INN2'] = df_2019['INN2'] / 100
df_2019['ER'] = df_2019['ER'] / 100
df_2019['R'] = df_2019['R'] / 100

df_2020['AB'] = df_2020['AB'] / 100
df_2020['HIT'] = df_2020['HIT'] / 100
df_2020['RUN'] = df_2020['RUN'] / 100
df_2020['INN2'] = df_2020['INN2'] / 100
df_2020['ER'] = df_2020['ER'] / 100
df_2020['R'] = df_2020['R'] / 100

"""## 팀 별 분리"""

# OB
df_OB16 = df_2016['T_ID'] == 'OB'
df_OB17 = df_2017['T_ID'] == 'OB'
df_OB18 = df_2018['T_ID'] == 'OB'
df_OB19 = df_2019['T_ID'] == 'OB'
df_OB20 = df_2020['T_ID'] == 'OB'

# LT
df_LT16 = df_2016['T_ID'] == 'LT'
df_LT17 = df_2017['T_ID'] == 'LT'
df_LT18 = df_2018['T_ID'] == 'LT'
df_LT19 = df_2019['T_ID'] == 'LT'
df_LT20 = df_2020['T_ID'] == 'LT'

# KT
df_KT16 = df_2016['T_ID'] == 'KT'
df_KT17 = df_2017['T_ID'] == 'KT'
df_KT18 = df_2018['T_ID'] == 'KT'
df_KT19 = df_2019['T_ID'] == 'KT'
df_KT20 = df_2020['T_ID'] == 'KT'

# SS
df_SS16 = df_2016['T_ID'] == 'SS'
df_SS17 = df_2017['T_ID'] == 'SS'
df_SS18 = df_2018['T_ID'] == 'SS'
df_SS19 = df_2019['T_ID'] == 'SS'
df_SS20 = df_2020['T_ID'] == 'SS'

# LG
df_LG16 = df_2016['T_ID'] == 'LG'
df_LG17 = df_2017['T_ID'] == 'LG'
df_LG18 = df_2018['T_ID'] == 'LG'
df_LG19 = df_2019['T_ID'] == 'LG'
df_LG20 = df_2020['T_ID'] == 'LG'

# HH
df_HH16 = df_2016['T_ID'] == 'HH'
df_HH17 = df_2017['T_ID'] == 'HH'
df_HH18 = df_2018['T_ID'] == 'HH'
df_HH19 = df_2019['T_ID'] == 'HH'
df_HH20 = df_2020['T_ID'] == 'HH'

# HT
df_HT16 = df_2016['T_ID'] == 'HT'
df_HT17 = df_2017['T_ID'] == 'HT'
df_HT18 = df_2018['T_ID'] == 'HT'
df_HT19 = df_2019['T_ID'] == 'HT'
df_HT20 = df_2020['T_ID'] == 'HT'

# WO
df_WO16 = df_2016['T_ID'] == 'WO'
df_WO17 = df_2017['T_ID'] == 'WO'
df_WO18 = df_2018['T_ID'] == 'WO'
df_WO19 = df_2019['T_ID'] == 'WO'
df_WO20 = df_2020['T_ID'] == 'WO'

# SK
df_SK16 = df_2016['T_ID'] == 'SK'
df_SK17 = df_2017['T_ID'] == 'SK'
df_SK18 = df_2018['T_ID'] == 'SK'
df_SK19 = df_2019['T_ID'] == 'SK'
df_SK20 = df_2020['T_ID'] == 'SK'

# NC
df_NC16 = df_2016['T_ID'] == 'NC'
df_NC17 = df_2017['T_ID'] == 'NC'
df_NC18 = df_2018['T_ID'] == 'NC'
df_NC19 = df_2019['T_ID'] == 'NC'
df_NC20 = df_2020['T_ID'] == 'NC'

# OB
OB_16 = df_2016[df_OB16]
OB_17 = df_2017[df_OB17]
OB_18 = df_2018[df_OB18]
OB_19 = df_2019[df_OB19]
OB_20 = df_2020[df_OB20]

# LT
LT_16 = df_2016[df_LT16]
LT_17 = df_2017[df_LT17]
LT_18 = df_2018[df_LT18]
LT_19 = df_2019[df_LT19]
LT_20 = df_2020[df_LT20]

# KT
KT_16 = df_2016[df_KT16]
KT_17 = df_2017[df_KT17]
KT_18 = df_2018[df_KT18]
KT_19 = df_2019[df_KT19]
KT_20 = df_2020[df_KT20]

# SS
SS_16 = df_2016[df_SS16]
SS_17 = df_2017[df_SS17]
SS_18 = df_2018[df_SS18]
SS_19 = df_2019[df_SS19]
SS_20 = df_2020[df_SS20]

# LG
LG_16 = df_2016[df_LG16]
LG_17 = df_2017[df_LG17]
LG_18 = df_2018[df_LG18]
LG_19 = df_2019[df_LG19]
LG_20 = df_2020[df_LG20]

# HH
HH_16 = df_2016[df_HH16]
HH_17 = df_2017[df_HH17]
HH_18 = df_2018[df_HH18]
HH_19 = df_2019[df_HH19]
HH_20 = df_2020[df_HH20]

# HT
HT_16 = df_2016[df_HT16]
HT_17 = df_2017[df_HT17]
HT_18 = df_2018[df_HT18]
HT_19 = df_2019[df_HT19]
HT_20 = df_2020[df_HT20]

# WO
WO_16 = df_2016[df_WO16]
WO_17 = df_2017[df_WO17]
WO_18 = df_2018[df_WO18]
WO_19 = df_2019[df_WO19]
WO_20 = df_2020[df_WO20]

# SK
SK_16 = df_2016[df_SK16]
SK_17 = df_2017[df_SK17]
SK_18 = df_2018[df_SK18]
SK_19 = df_2019[df_SK19]
SK_20 = df_2020[df_SK20]

# NC
NC_16 = df_2016[df_NC16]
NC_17 = df_2017[df_NC17]
NC_18 = df_2018[df_NC18]
NC_19 = df_2019[df_NC19]
NC_20 = df_2020[df_NC20]

"""# LT 타율, 방어율, 승률 예측

# LT. 불필요한 Column 제거
"""

del LT_16['VS_T_ID']
del LT_16['T_ID']
del LT_16['GDAY_DS']

del LT_17['VS_T_ID']
del LT_17['T_ID']
del LT_17['GDAY_DS']

del LT_18['VS_T_ID']
del LT_18['T_ID']
del LT_18['GDAY_DS']

del LT_19['VS_T_ID']
del LT_19['T_ID']
del LT_19['GDAY_DS']

del LT_20['VS_T_ID']
del LT_20['T_ID']
del LT_20['GDAY_DS']

print(LT_20.dtypes)

"""# LT - 게임 수로 데이터 쪼개기"""

# LT 2016년
LT_16_01 = LT_16[(LT_16['GAME'] >= 1) & (LT_16['GAME'] <= 36)]
LT_16_02 = LT_16[(LT_16['GAME'] >= 37) & (LT_16['GAME'] <= 72)]
LT_16_03 = LT_16[(LT_16['GAME'] >= 73) & (LT_16['GAME'] <= 108)]
LT_16_04 = LT_16[(LT_16['GAME'] >= 109) & (LT_16['GAME'] <= 144)]

# LT 2017년
LT_17_01 = LT_17[(LT_17['GAME'] >= 1) & (LT_17['GAME'] <= 36)]
LT_17_02 = LT_17[(LT_17['GAME'] >= 37) & (LT_17['GAME'] <= 72)]
LT_17_03 = LT_17[(LT_17['GAME'] >= 73) & (LT_17['GAME'] <= 108)]
LT_17_04 = LT_17[(LT_17['GAME'] >= 109) & (LT_17['GAME'] <= 144)]

# LT 2018년
LT_18_01 = LT_18[(LT_18['GAME'] >= 1) & (LT_18['GAME'] <= 36)]
LT_18_02 = LT_18[(LT_18['GAME'] >= 37) & (LT_18['GAME'] <= 72)]
LT_18_03 = LT_18[(LT_18['GAME'] >= 73) & (LT_18['GAME'] <= 108)]
LT_18_04 = LT_18[(LT_18['GAME'] >= 109) & (LT_18['GAME'] <= 144)]

# LT 2019년
LT_19_01 = LT_19[(LT_19['GAME'] >= 1) & (LT_19['GAME'] <= 36)]
LT_19_02 = LT_19[(LT_19['GAME'] >= 37) & (LT_19['GAME'] <= 72)]
LT_19_03 = LT_19[(LT_19['GAME'] >= 73) & (LT_19['GAME'] <= 108)]
LT_19_04 = LT_19[(LT_19['GAME'] >= 109) & (LT_19['GAME'] <= 144)]

# LT 2020년
LT_20_01 = LT_20[(LT_20['GAME'] >= 1) & (LT_20['GAME'] <= 36)]
LT_20_02 = LT_20[(LT_20['GAME'] >= 37) & (LT_20['GAME'] <= 72)]
LT_20_03 = LT_20[(LT_20['GAME'] >= 73) & (LT_20['GAME'] <= 108)]

del LT_16_01['GAME']
del LT_16_02['GAME']
del LT_16_03['GAME']
del LT_16_04['GAME']

del LT_17_01['GAME']
del LT_17_02['GAME']
del LT_17_03['GAME']
del LT_17_04['GAME']

del LT_18_01['GAME']
del LT_18_02['GAME']
del LT_18_03['GAME']
del LT_18_04['GAME']

del LT_19_01['GAME']
del LT_19_02['GAME']
del LT_19_03['GAME']
del LT_19_04['GAME']

del LT_20_01['GAME']
del LT_20_02['GAME']
del LT_20_03['GAME']

"""# LT 학습 데이터 구축"""

X = []
Y = []

for i in range(36):
  X.append(list(LT_16_01.iloc[i]))
  X.append(list(LT_16_02.iloc[i]))
  X.append(list(LT_16_03.iloc[i]))
  X.append(list(LT_17_01.iloc[i]))
  X.append(list(LT_17_02.iloc[i]))
  X.append(list(LT_17_03.iloc[i]))
  X.append(list(LT_18_01.iloc[i]))
  X.append(list(LT_18_02.iloc[i]))
  X.append(list(LT_18_03.iloc[i]))
  X.append(list(LT_19_01.iloc[i]))
  X.append(list(LT_19_02.iloc[i]))
  X.append(list(LT_19_03.iloc[i]))
  
 
for j in range(36):
  Y.append(list(LT_16_04.iloc[j]))
  Y.append(list(LT_17_04.iloc[j]))
  Y.append(list(LT_18_04.iloc[j]))
  Y.append(list(LT_19_04.iloc[j]))

X = np.array(X)
Y = np.array(Y)

print(X.shape)
print(Y.shape)

X = X.reshape(144, 3, 6)

print(X.shape)
print(Y.shape)

"""# LSTM 모델 생성 및 컴파일"""

LT_model= tf.keras.Sequential([
                             tf.keras.layers.LSTM(units = 30, return_sequences=True, input_shape=[3, 6]),
                             tf.keras.layers.LSTM(units = 30),
                             tf.keras.layers.Dropout(0.3),
                             tf.keras.layers.Dense(6)
])

LT_model.compile(optimizer='rmsprop', loss='mse')   #'rmsprop'
LT_model.summary()

LT_history = LT_model.fit(X[:144], Y[:144], epochs = 60, batch_size = 40, validation_split=0.1)

import matplotlib.pyplot as plt
plt.plot(LT_history.history['loss'], 'b-', label = 'loss')
plt.plot(LT_history.history['val_loss'], 'r--', label = 'val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""# LT 모델 예측율 구하기"""

LT_model.evaluate(X[129:], Y[129:])
prediction = LT_model.predict(X[129:129+15])

for i in range(15):
    print(Y[129+i], '\t', prediction[i], '\tdiff:', abs(prediction[i] - Y[129 + i]))

prediction = LT_model.predict(X[129:])
fail = 0
for i in range(len(prediction)):
  for j in range(6):
    if abs(prediction[i][j] - Y[129+i][j]) > 0.1:
      fail += 1
print('correctness:', (129 - fail) / 129*100, '%')

"""# LT 모델 저장"""

LT_model.save('LT.h5')

LT_model = load_model('LT.h5')

"""# LT 예측 범위 구하기"""

LT_test = []

for i in range(36):
  LT_test.append(list(LT_20_01.iloc[i]))
  LT_test.append(list(LT_20_02.iloc[i]))
  LT_test.append(list(LT_20_03.iloc[i]))

LT_test = np.array(LT_test)

LT_test.shape

LT_test = LT_test.reshape(36 ,3, 6)

LT = LT_model.predict(LT_test)

# 과제 범위 기간 내 예측 값 출력 ['AB', 'RUN', 'HIT', 'INN2', 'R', 'ER']
LT[18:]

# 타율, 방어율, 득점&실점 예측하기
LT_AB = np.sum(LT[18:,0])
LT_HIT = np.sum(LT[18:,2])
LT_AVG = LT_HIT / LT_AB

LT_INN2 = np.sum(LT[18:,3])
LT_ER = np.sum(LT[18:,5])
LT_ERA = (LT_ER * 9) / (LT_INN2 / 3)

LT_total_RUN = np.sum(LT[18:,1]) * 100
LT_total_R = np.sum(LT[18:, 4]) * 100

print("롯데 타율 값 : ", LT_AVG)
print("롯데 방어율 값 : ", LT_ERA)
print("롯데 득점 total : ", LT_total_RUN)
print("롯데 실점 total : ", LT_total_R)

"""# NC 타율, 방어율, 승률 예측

# NC - 불필요한 Column 제거
"""

del NC_16['VS_T_ID']
del NC_16['T_ID']
del NC_16['GDAY_DS']

del NC_17['VS_T_ID']
del NC_17['T_ID']
del NC_17['GDAY_DS']

del NC_18['VS_T_ID']
del NC_18['T_ID']
del NC_18['GDAY_DS']

del NC_19['VS_T_ID']
del NC_19['T_ID']
del NC_19['GDAY_DS']

del NC_20['VS_T_ID']
del NC_20['T_ID']
del NC_20['GDAY_DS']

"""# NC - 게임 수로 데이터 쪼개기"""

# NC 2016년
NC_16_01 = NC_16[(NC_16['GAME'] >= 1) & (NC_16['GAME'] <= 36)]
NC_16_02 = NC_16[(NC_16['GAME'] >= 37) & (NC_16['GAME'] <= 72)]
NC_16_03 = NC_16[(NC_16['GAME'] >= 73) & (NC_16['GAME'] <= 108)]
NC_16_04 = NC_16[(NC_16['GAME'] >= 109) & (NC_16['GAME'] <= 144)]

# NC 2017년
NC_17_01 = NC_17[(NC_17['GAME'] >= 1) & (NC_17['GAME'] <= 36)]
NC_17_02 = NC_17[(NC_17['GAME'] >= 37) & (NC_17['GAME'] <= 72)]
NC_17_03 = NC_17[(NC_17['GAME'] >= 73) & (NC_17['GAME'] <= 108)]
NC_17_04 = NC_17[(NC_17['GAME'] >= 109) & (NC_17['GAME'] <= 144)]

# NC 2018년
NC_18_01 = NC_18[(NC_18['GAME'] >= 1) & (NC_18['GAME'] <= 36)]
NC_18_02 = NC_18[(NC_18['GAME'] >= 37) & (NC_18['GAME'] <= 72)]
NC_18_03 = NC_18[(NC_18['GAME'] >= 73) & (NC_18['GAME'] <= 108)]
NC_18_04 = NC_18[(NC_18['GAME'] >= 109) & (NC_18['GAME'] <= 144)]

# NC 2019년
NC_19_01 = NC_19[(NC_19['GAME'] >= 1) & (NC_19['GAME'] <= 36)]
NC_19_02 = NC_19[(NC_19['GAME'] >= 37) & (NC_19['GAME'] <= 72)]
NC_19_03 = NC_19[(NC_19['GAME'] >= 73) & (NC_19['GAME'] <= 108)]
NC_19_04 = NC_19[(NC_19['GAME'] >= 109) & (NC_19['GAME'] <= 144)]

# NC 2020년
NC_20_01 = NC_20[(NC_20['GAME'] >= 1) & (NC_20['GAME'] <= 36)]
NC_20_02 = NC_20[(NC_20['GAME'] >= 37) & (NC_20['GAME'] <= 72)]
NC_20_03 = NC_20[(NC_20['GAME'] >= 73) & (NC_20['GAME'] <= 108)]

del NC_16_01['GAME']
del NC_16_02['GAME']
del NC_16_03['GAME']
del NC_16_04['GAME']

del NC_17_01['GAME']
del NC_17_02['GAME']
del NC_17_03['GAME']
del NC_17_04['GAME']

del NC_18_01['GAME']
del NC_18_02['GAME']
del NC_18_03['GAME']
del NC_18_04['GAME']

del NC_19_01['GAME']
del NC_19_02['GAME']
del NC_19_03['GAME']
del NC_19_04['GAME']

del NC_20_01['GAME']
del NC_20_02['GAME']
del NC_20_03['GAME']

"""# NC 학습 데이터 구축"""

X = []
Y = []

for i in range(36):
  X.append(list(NC_16_01.iloc[i]))
  X.append(list(NC_16_02.iloc[i]))
  X.append(list(NC_16_03.iloc[i]))
  X.append(list(NC_17_01.iloc[i]))
  X.append(list(NC_17_02.iloc[i]))
  X.append(list(NC_17_03.iloc[i]))
  X.append(list(NC_18_01.iloc[i]))
  X.append(list(NC_18_02.iloc[i]))
  X.append(list(NC_18_03.iloc[i]))
  X.append(list(NC_19_01.iloc[i]))
  X.append(list(NC_19_02.iloc[i]))
  X.append(list(NC_19_03.iloc[i]))


for j in range(36):
  Y.append(list(NC_16_04.iloc[j]))
  Y.append(list(NC_17_04.iloc[j]))
  Y.append(list(NC_18_04.iloc[j]))
  Y.append(list(NC_19_04.iloc[j]))

X = np.array(X)
Y = np.array(Y)

print(X.shape)
print(Y.shape)

X = X.reshape(144, 3, 6)
print(X.shape)
print(Y.shape)

"""# LSTM 모델 생성 및 컴파일"""

NC_model= tf.keras.Sequential([
                             tf.keras.layers.LSTM(units = 30, return_sequences=True, input_shape=[3, 6]),
                             tf.keras.layers.LSTM(units = 30),
                             tf.keras.layers.Dropout(0.3),
                             tf.keras.layers.Dense(6)
])
NC_model.compile(optimizer='rmsprop', loss='mse')   #'rmsprop'
NC_model.summary()

NC_history = NC_model.fit(X[:144], Y[:144], epochs = 60, batch_size = 40, validation_split=0.1)

import matplotlib.pyplot as plt
plt.plot(NC_history.history['loss'], 'b-', label = 'loss')
plt.plot(NC_history.history['val_loss'], 'r--', label = 'val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""# NC 모델 예측율 구하기"""

NC_model.evaluate(X[129:], Y[129:])
prediction = NC_model.predict(X[129:129+15])

for i in range(15):
  print(Y[129+i], '\t', prediction[i], '\tdiff:', abs(prediction[i] - Y[129 + i]))

prediction = NC_model.predict(X[129:])
fail = 0
for i in range(len(prediction)):
  for j in range(6):
    if abs(prediction[i][j] - Y[129+i][j]) > 0.1:
      fail += 1
print('correctness:', (129 - fail) / 129*100, '%')

"""# NC 모델 저장"""

NC_model.save('NC.h5')
NC_model = load_model('NC.h5')

"""# NC 예측 범위 구하기"""

NC_test = []

for i in range(36):
  NC_test.append(list(NC_20_01.iloc[i]))
  NC_test.append(list(NC_20_02.iloc[i]))
  NC_test.append(list(NC_20_03.iloc[i]))

NC_test = np.array(NC_test)
NC_test.shape
NC_test = NC_test.reshape(36 ,3, 6)

NC = NC_model.predict(NC_test)

# 과제 범위 기간 내 예측 값 출력 ['AB', 'RUN', 'HIT', 'INN2', 'R', 'ER']
NC[20:]

# 타율, 방어율, 득점&실점 예측하기
NC_AB = np.sum(NC[20:,0])
NC_HIT = np.sum(NC[20:,2])
NC_AVG = NC_HIT / NC_AB

NC_INN2 = np.sum(NC[20:,3])
NC_ER = np.sum(NC[20:,5])
NC_ERA = (NC_ER * 9) / (NC_INN2 / 3)

NC_total_RUN = np.sum(NC[20:,1]) * 100
NC_total_R = np.sum(NC[20:, 4]) * 100

print("NC 타율 값 : ", NC_AVG)
print("NC 방어율 값 : ", NC_ERA)
print("NC 득점 total : ", NC_total_RUN)
print("NC 실점 total : ", NC_total_R)

"""# OB 타율, 방어율, 승률 예측

# OB - 불필요한 Column 제거
"""

del OB_16['VS_T_ID']
del OB_16['T_ID']
del OB_16['GDAY_DS']

del OB_17['VS_T_ID']
del OB_17['T_ID']
del OB_17['GDAY_DS']

del OB_18['VS_T_ID']
del OB_18['T_ID']
del OB_18['GDAY_DS']

del OB_19['VS_T_ID']
del OB_19['T_ID']
del OB_19['GDAY_DS']

del OB_20['VS_T_ID']
del OB_20['T_ID']
del OB_20['GDAY_DS']

"""# OB - 게임 수로 데이터 쪼개기"""

# OB 2016년
OB_16_01 = OB_16[(OB_16['GAME'] >= 1) & (OB_16['GAME'] <= 36)]
OB_16_02 = OB_16[(OB_16['GAME'] >= 37) & (OB_16['GAME'] <= 72)]
OB_16_03 = OB_16[(OB_16['GAME'] >= 73) & (OB_16['GAME'] <= 108)]
OB_16_04 = OB_16[(OB_16['GAME'] >= 109) & (OB_16['GAME'] <= 144)]

# OB 2017년
OB_17_01 = OB_17[(OB_17['GAME'] >= 1) & (OB_17['GAME'] <= 36)]
OB_17_02 = OB_17[(OB_17['GAME'] >= 37) & (OB_17['GAME'] <= 72)]
OB_17_03 = OB_17[(OB_17['GAME'] >= 73) & (OB_17['GAME'] <= 108)]
OB_17_04 = OB_17[(OB_17['GAME'] >= 109) & (OB_17['GAME'] <= 144)]

# OB 2018년
OB_18_01 = OB_18[(OB_18['GAME'] >= 1) & (OB_18['GAME'] <= 36)]
OB_18_02 = OB_18[(OB_18['GAME'] >= 37) & (OB_18['GAME'] <= 72)]
OB_18_03 = OB_18[(OB_18['GAME'] >= 73) & (OB_18['GAME'] <= 108)]
OB_18_04 = OB_18[(OB_18['GAME'] >= 109) & (OB_18['GAME'] <= 144)]

# OB 2019년
OB_19_01 = OB_19[(OB_19['GAME'] >= 1) & (OB_19['GAME'] <= 36)]
OB_19_02 = OB_19[(OB_19['GAME'] >= 37) & (OB_19['GAME'] <= 72)]
OB_19_03 = OB_19[(OB_19['GAME'] >= 73) & (OB_19['GAME'] <= 108)]
OB_19_04 = OB_19[(OB_19['GAME'] >= 109) & (OB_19['GAME'] <= 144)]

# OB 2020년
OB_20_01 = OB_20[(OB_20['GAME'] >= 1) & (OB_20['GAME'] <= 36)]
OB_20_02 = OB_20[(OB_20['GAME'] >= 37) & (OB_20['GAME'] <= 72)]
OB_20_03 = OB_20[(OB_20['GAME'] >= 73) & (OB_20['GAME'] <= 108)]
OB_20_04 = OB_20[(OB_20['GAME'] >= 109) & (OB_20['GAME'] <= 144)]

del OB_16_01['GAME']
del OB_16_02['GAME']
del OB_16_03['GAME']
del OB_16_04['GAME']

del OB_17_01['GAME']
del OB_17_02['GAME']
del OB_17_03['GAME']
del OB_17_04['GAME']

del OB_18_01['GAME']
del OB_18_02['GAME']
del OB_18_03['GAME']
del OB_18_04['GAME']

del OB_19_01['GAME']
del OB_19_02['GAME']
del OB_19_03['GAME']
del OB_19_04['GAME']

del OB_20_01['GAME']
del OB_20_02['GAME']
del OB_20_03['GAME']
del OB_20_04['GAME']

"""# OB 학습 데이터 구축"""

X = []
Y = []

for i in range(36):
  X.append(list(OB_16_01.iloc[i]))
  X.append(list(OB_16_02.iloc[i]))
  X.append(list(OB_16_03.iloc[i]))
  X.append(list(OB_17_01.iloc[i]))
  X.append(list(OB_17_02.iloc[i]))
  X.append(list(OB_17_03.iloc[i]))
  X.append(list(OB_18_01.iloc[i]))
  X.append(list(OB_18_02.iloc[i]))
  X.append(list(OB_18_03.iloc[i]))
  X.append(list(OB_19_01.iloc[i]))
  X.append(list(OB_19_02.iloc[i]))
  X.append(list(OB_19_03.iloc[i]))


for j in range(36):
  Y.append(list(OB_16_04.iloc[j]))
  Y.append(list(OB_17_04.iloc[j]))
  Y.append(list(OB_18_04.iloc[j]))
  Y.append(list(OB_19_04.iloc[j]))

X = np.array(X)
Y = np.array(Y)

print(X.shape)
print(Y.shape)

X = X.reshape(144, 3, 6)
print(X.shape)
print(Y.shape)

"""# LSTM 모델 생성 및 컴파일"""

OB_model= tf.keras.Sequential([
                             tf.keras.layers.LSTM(units = 30, return_sequences=True, input_shape=[3, 6]),
                             tf.keras.layers.LSTM(units = 30),
                             tf.keras.layers.Dropout(0.3),
                             tf.keras.layers.Dense(6)
])

OB_model.compile(optimizer='rmsprop', loss='mse')   #'rmsprop'
OB_model.summary()

OB_history = OB_model.fit(X[:144], Y[:144], epochs = 60, batch_size = 40, validation_split=0.1)

import matplotlib.pyplot as plt
plt.plot(OB_history.history['loss'], 'b-', label = 'loss')
plt.plot(OB_history.history['val_loss'], 'r--', label = 'val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""# OB 예측율 구하기"""

OB_model.evaluate(X[129:], Y[129:])
prediction = OB_model.predict(X[129:129+15])

for i in range(15):
  print(Y[129+i], '\t', prediction[i], '\tdiff:', abs(prediction[i] - Y[129 + i]))

prediction = OB_model.predict(X[129:])
fail = 0
for i in range(len(prediction)):
  for j in range(6):
    if abs(prediction[i][j] - Y[129+i][j]) > 0.06:
      fail += 1
print('correctness:', (129 - fail) / 129*100, '%')

"""# OB 모델 저장"""

OB_model.save('OB.h5')
OB_model = load_model('OB.h5')

"""# OB 예측 범위 구하기"""

OB_test = []

for i in range(36):
  OB_test.append(list(OB_20_01.iloc[i]))
  OB_test.append(list(OB_20_02.iloc[i]))
  OB_test.append(list(OB_20_03.iloc[i]))

OB_test = np.array(OB_test)
OB_test.shape

OB_test = OB_test.reshape(36 ,3, 6)

OB = OB_model.predict(OB_test)

# 과제 범위 기간 내 예측 값 출력 ['AB', 'RUN', 'HIT', 'INN2', 'R', 'ER']
OB[18:]

# 타율, 방어율, 득점&실점 예측하기
OB_AB = np.sum(OB[18:,0])
OB_HIT = np.sum(OB[18:,2])
OB_AVG = OB_HIT / OB_AB

OB_INN2 = np.sum(OB[18:,3])
OB_ER = np.sum(OB[18:,5])
OB_ERA = (OB_ER * 9) / (OB_INN2 / 3)

OB_total_RUN = np.sum(OB[18:,1]) * 100
OB_total_R = np.sum(OB[18:, 4]) * 100

print("두산 타율 값 : ", OB_AVG)
print("두산 방어율 값 : ", OB_ERA)
print("두산 득점 total : ", OB_total_RUN)
print("두산 실점 total : ", OB_total_R)

"""# WO 타율, 방어율, 승률 예측

# WO - 불필요한 Column 제거
"""

del WO_16['VS_T_ID']
del WO_16['T_ID']
del WO_16['GDAY_DS']

del WO_17['VS_T_ID']
del WO_17['T_ID']
del WO_17['GDAY_DS']

del WO_18['VS_T_ID']
del WO_18['T_ID']
del WO_18['GDAY_DS']

del WO_19['VS_T_ID']
del WO_19['T_ID']
del WO_19['GDAY_DS']

del WO_20['VS_T_ID']
del WO_20['T_ID']
del WO_20['GDAY_DS']

"""# WO - 게임 수로 데이터 쪼개기"""

# WO 2016년
WO_16_01 = WO_16[(WO_16['GAME'] >= 1) & (WO_16['GAME'] <= 36)]
WO_16_02 = WO_16[(WO_16['GAME'] >= 37) & (WO_16['GAME'] <= 72)]
WO_16_03 = WO_16[(WO_16['GAME'] >= 73) & (WO_16['GAME'] <= 108)]
WO_16_04 = WO_16[(WO_16['GAME'] >= 109) & (WO_16['GAME'] <= 144)]

# WO 2017년
WO_17_01 = WO_17[(WO_17['GAME'] >= 1) & (WO_17['GAME'] <= 36)]
WO_17_02 = WO_17[(WO_17['GAME'] >= 37) & (WO_17['GAME'] <= 72)]
WO_17_03 = WO_17[(WO_17['GAME'] >= 73) & (WO_17['GAME'] <= 108)]
WO_17_04 = WO_17[(WO_17['GAME'] >= 109) & (WO_17['GAME'] <= 144)]

# WO 2018년
WO_18_01 = WO_18[(WO_18['GAME'] >= 1) & (WO_18['GAME'] <= 36)]
WO_18_02 = WO_18[(WO_18['GAME'] >= 37) & (WO_18['GAME'] <= 72)]
WO_18_03 = WO_18[(WO_18['GAME'] >= 73) & (WO_18['GAME'] <= 108)]
WO_18_04 = WO_18[(WO_18['GAME'] >= 109) & (WO_18['GAME'] <= 144)]

# WO 2019년
WO_19_01 = WO_19[(WO_19['GAME'] >= 1) & (WO_19['GAME'] <= 36)]
WO_19_02 = WO_19[(WO_19['GAME'] >= 37) & (WO_19['GAME'] <= 72)]
WO_19_03 = WO_19[(WO_19['GAME'] >= 73) & (WO_19['GAME'] <= 108)]
WO_19_04 = WO_19[(WO_19['GAME'] >= 109) & (WO_19['GAME'] <= 144)]

# WO 2020년
WO_20_01 = WO_20[(WO_20['GAME'] >= 1) & (WO_20['GAME'] <= 36)]
WO_20_02 = WO_20[(WO_20['GAME'] >= 37) & (WO_20['GAME'] <= 72)]
WO_20_03 = WO_20[(WO_20['GAME'] >= 73) & (WO_20['GAME'] <= 108)]

del WO_16_01['GAME']
del WO_16_02['GAME']
del WO_16_03['GAME']
del WO_16_04['GAME']

del WO_17_01['GAME']
del WO_17_02['GAME']
del WO_17_03['GAME']
del WO_17_04['GAME']

del WO_18_01['GAME']
del WO_18_02['GAME']
del WO_18_03['GAME']
del WO_18_04['GAME']

del WO_19_01['GAME']
del WO_19_02['GAME']
del WO_19_03['GAME']
del WO_19_04['GAME']

del WO_20_01['GAME']
del WO_20_02['GAME']
del WO_20_03['GAME']

"""# WO 학습 데이터 구축"""

X = []
Y = []

for i in range(36):
  X.append(list(WO_16_01.iloc[i]))
  X.append(list(WO_16_02.iloc[i]))
  X.append(list(WO_16_03.iloc[i]))
  X.append(list(WO_17_01.iloc[i]))
  X.append(list(WO_17_02.iloc[i]))
  X.append(list(WO_17_03.iloc[i]))
  X.append(list(WO_18_01.iloc[i]))
  X.append(list(WO_18_02.iloc[i]))
  X.append(list(WO_18_03.iloc[i]))
  X.append(list(WO_19_01.iloc[i]))
  X.append(list(WO_19_02.iloc[i]))
  X.append(list(WO_19_03.iloc[i]))


for j in range(36):
  Y.append(list(WO_16_04.iloc[j]))
  Y.append(list(WO_17_04.iloc[j]))
  Y.append(list(WO_18_04.iloc[j]))
  Y.append(list(WO_19_04.iloc[j]))

X = np.array(X)
Y = np.array(Y)

print(X.shape)
print(Y.shape)

X = X.reshape(144, 3, 6)
print(X.shape)
print(Y.shape)

"""# LSTM 모델 생성 및 컴파일"""

WO_model= tf.keras.Sequential([
                             tf.keras.layers.LSTM(units = 30, return_sequences=True, input_shape=[3, 6]),
                             tf.keras.layers.LSTM(units = 30),
                             tf.keras.layers.Dropout(0.3),
                             tf.keras.layers.Dense(6)
])

WO_model.compile(optimizer='rmsprop', loss='mse')   #'rmsprop'
WO_model.summary()

WO_history = WO_model.fit(X[:144], Y[:144], epochs = 60, batch_size = 40, validation_split=0.1)

import matplotlib.pyplot as plt
plt.plot(WO_history.history['loss'], 'b-', label = 'loss')
plt.plot(WO_history.history['val_loss'], 'r--', label = 'val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""# WO 모델 예측율 구하기"""

WO_model.evaluate(X[129:], Y[129:])
prediction = WO_model.predict(X[129:129+15])

for i in range(15):
  print(Y[129+i], '\t', prediction[i], '\tdiff:', abs(prediction[i] - Y[129 + i]))

prediction = WO_model.predict(X[129:])
fail = 0
for i in range(len(prediction)):
  for j in range(6):
    if abs(prediction[i][j] - Y[129+i][j]) > 0.06:
      fail += 1
print('correctness:', (129 - fail) / 129*100, '%')

"""# WO 모델 저장"""

WO_model.save('WO.h5')
WO_model = load_model('WO.h5')

"""# WO 예측 범위 구하기"""

WO_test = []

for i in range(36):
  WO_test.append(list(WO_20_01.iloc[i]))
  WO_test.append(list(WO_20_02.iloc[i]))
  WO_test.append(list(WO_20_03.iloc[i]))

WO_test = np.array(WO_test)
WO_test.shape

WO_test = WO_test.reshape(36 ,3, 6)

WO = WO_model.predict(WO_test)

# 과제 범위 기간 내 예측 값 출력 ['AB', 'RUN', 'HIT', 'INN2', 'R', 'ER']
WO[18:]

# 타율, 방어율, 득점&실점 예측하기
WO_AB = np.sum(WO[18:,0])
WO_HIT = np.sum(WO[18:,2])
WO_AVG = WO_HIT / WO_AB

WO_INN2 = np.sum(WO[18:,3])
WO_ER = np.sum(WO[18:,5])
WO_ERA = (WO_ER * 9) / (WO_INN2 / 3)

WO_total_RUN = np.sum(WO[18:,1]) * 100
WO_total_R = np.sum(WO[18:, 4]) * 100

print("키움 타율 값 : ", WO_AVG)
print("키움 방어율 값 : ", WO_ERA)
print("키움 득점 total : ", WO_total_RUN)
print("키움 실점 total : ", WO_total_R)

"""# KT 타율, 방어율, 승률 예측

# KT - 불필요한 Column 제거
"""

del KT_16['VS_T_ID']
del KT_16['T_ID']
del KT_16['GDAY_DS']

del KT_17['VS_T_ID']
del KT_17['T_ID']
del KT_17['GDAY_DS']

del KT_18['VS_T_ID']
del KT_18['T_ID']
del KT_18['GDAY_DS']

del KT_19['VS_T_ID']
del KT_19['T_ID']
del KT_19['GDAY_DS']

del KT_20['VS_T_ID']
del KT_20['T_ID']
del KT_20['GDAY_DS']

"""# KT - 게임 수로 데이터 쪼개기"""

# KT 2016년
KT_16_01 = KT_16[(KT_16['GAME'] >= 1) & (KT_16['GAME'] <= 36)]
KT_16_02 = KT_16[(KT_16['GAME'] >= 37) & (KT_16['GAME'] <= 72)]
KT_16_03 = KT_16[(KT_16['GAME'] >= 73) & (KT_16['GAME'] <= 108)]
KT_16_04 = KT_16[(KT_16['GAME'] >= 109) & (KT_16['GAME'] <= 144)]

# KT 2017년
KT_17_01 = KT_17[(KT_17['GAME'] >= 1) & (KT_17['GAME'] <= 36)]
KT_17_02 = KT_17[(KT_17['GAME'] >= 37) & (KT_17['GAME'] <= 72)]
KT_17_03 = KT_17[(KT_17['GAME'] >= 73) & (KT_17['GAME'] <= 108)]
KT_17_04 = KT_17[(KT_17['GAME'] >= 109) & (KT_17['GAME'] <= 144)]

# KT 2018년
KT_18_01 = KT_18[(KT_18['GAME'] >= 1) & (KT_18['GAME'] <= 36)]
KT_18_02 = KT_18[(KT_18['GAME'] >= 37) & (KT_18['GAME'] <= 72)]
KT_18_03 = KT_18[(KT_18['GAME'] >= 73) & (KT_18['GAME'] <= 108)]
KT_18_04 = KT_18[(KT_18['GAME'] >= 109) & (KT_18['GAME'] <= 144)]

# KT 2019년
KT_19_01 = KT_19[(KT_19['GAME'] >= 1) & (KT_19['GAME'] <= 36)]
KT_19_02 = KT_19[(KT_19['GAME'] >= 37) & (KT_19['GAME'] <= 72)]
KT_19_03 = KT_19[(KT_19['GAME'] >= 73) & (KT_19['GAME'] <= 108)]
KT_19_04 = KT_19[(KT_19['GAME'] >= 109) & (KT_19['GAME'] <= 144)]

# KT 2020년
KT_20_01 = KT_20[(KT_20['GAME'] >= 1) & (KT_20['GAME'] <= 36)]
KT_20_02 = KT_20[(KT_20['GAME'] >= 37) & (KT_20['GAME'] <= 72)]
KT_20_03 = KT_20[(KT_20['GAME'] >= 73) & (KT_20['GAME'] <= 108)]

del KT_16_01['GAME']
del KT_16_02['GAME']
del KT_16_03['GAME']
del KT_16_04['GAME']

del KT_17_01['GAME']
del KT_17_02['GAME']
del KT_17_03['GAME']
del KT_17_04['GAME']

del KT_18_01['GAME']
del KT_18_02['GAME']
del KT_18_03['GAME']
del KT_18_04['GAME']

del KT_19_01['GAME']
del KT_19_02['GAME']
del KT_19_03['GAME']
del KT_19_04['GAME']

del KT_20_01['GAME']
del KT_20_02['GAME']
del KT_20_03['GAME']

"""# KT 학습 데이터 구축"""

X = []
Y = []

for i in range(36):
  X.append(list(KT_16_01.iloc[i]))
  X.append(list(KT_16_02.iloc[i]))
  X.append(list(KT_16_03.iloc[i]))
  X.append(list(KT_17_01.iloc[i]))
  X.append(list(KT_17_02.iloc[i]))
  X.append(list(KT_17_03.iloc[i]))
  X.append(list(KT_18_01.iloc[i]))
  X.append(list(KT_18_02.iloc[i]))
  X.append(list(KT_18_03.iloc[i]))
  X.append(list(KT_19_01.iloc[i]))
  X.append(list(KT_19_02.iloc[i]))
  X.append(list(KT_19_03.iloc[i]))


for j in range(36):
  Y.append(list(KT_16_04.iloc[j]))
  Y.append(list(KT_17_04.iloc[j]))
  Y.append(list(KT_18_04.iloc[j]))
  Y.append(list(KT_19_04.iloc[j]))

X = np.array(X)
Y = np.array(Y)
X = X.reshape(144, 3, 6)
print(X.shape)
print(Y.shape)

"""# LSTM 모델 생성 및 컴파일"""

KT_model= tf.keras.Sequential([
                               tf.keras.layers.LSTM(units = 30, return_sequences=True, input_shape=[3, 6]),
                               tf.keras.layers.LSTM(units = 30),
                               tf.keras.layers.Dropout(0.3),
                               tf.keras.layers.Dense(6)])

KT_model.compile(optimizer='rmsprop', loss='mse')   #'rmsprop'
KT_model.summary()

KT_history = KT_model.fit(X[:144], Y[:144], epochs = 60, batch_size = 40, validation_split=0.1)

import matplotlib.pyplot as plt
plt.plot(KT_history.history['loss'], 'b-', label = 'loss')
plt.plot(KT_history.history['val_loss'], 'r--', label = 'val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""# KT 모델 예측율 구하기"""

KT_model.evaluate(X[129:], Y[129:])
prediction = KT_model.predict(X[129:129+15])

for i in range(15):
  print(Y[129+i], '\t', prediction[i], '\tdiff:', abs(prediction[i] - Y[129 + i]))

prediction = KT_model.predict(X[129:])
fail = 0
for i in range(len(prediction)):
  for j in range(6):
    if abs(prediction[i][j] - Y[129+i][j]) > 0.1:
      fail += 1
print('correctness:', (129 - fail) / 129*100, '%')

"""# KT 모델 저장"""

KT_model.save('KT.h5')
KT_model = load_model('KT.h5')

"""# KT 예측범위 구하기"""

KT_test = []

for i in range(36):
  KT_test.append(list(KT_20_01.iloc[i]))
  KT_test.append(list(KT_20_02.iloc[i]))
  KT_test.append(list(KT_20_03.iloc[i]))

KT_test = np.array(KT_test)
KT_test.shape

KT_test = KT_test.reshape(36 ,3, 6)

KT = KT_model.predict(KT_test)

# 과제 범위 기간 내 예측 값 출력 ['AB', 'RUN', 'HIT', 'INN2', 'R', 'ER']
KT[19:]

# 타율, 방어율, 득점&실점 예측하기
KT_AB = np.sum(KT[19:,0])
KT_HIT = np.sum(KT[19:,2])
KT_AVG = KT_HIT / KT_AB

KT_INN2 = np.sum(KT[19:,3])
KT_ER = np.sum(KT[19:,5])
KT_ERA = (KT_ER * 9) / (KT_INN2 / 3)

KT_total_RUN = np.sum(KT[19:,1]) * 100
KT_total_R = np.sum(KT[19:, 4]) * 100

print("KT 타율 값 : ", KT_AVG)
print("KT 방어율 값 : ", KT_ERA)
print("KT 득점 total : ", KT_total_RUN)
print("KT 실점 total : ", KT_total_R)

"""# LG 타율, 방어율, 승률 예측

# LG - 불필요한 Column 제거
"""

del LG_16['VS_T_ID']
del LG_16['T_ID']
del LG_16['GDAY_DS']

del LG_17['VS_T_ID']
del LG_17['T_ID']
del LG_17['GDAY_DS']

del LG_18['VS_T_ID']
del LG_18['T_ID']
del LG_18['GDAY_DS']

del LG_19['VS_T_ID']
del LG_19['T_ID']
del LG_19['GDAY_DS']

del LG_20['VS_T_ID']
del LG_20['T_ID']
del LG_20['GDAY_DS']

"""# LG - 게임 수로 데이터 쪼개기"""

# LG 2016년
LG_16_01 = LG_16[(LG_16['GAME'] >= 1) & (LG_16['GAME'] <= 36)]
LG_16_02 = LG_16[(LG_16['GAME'] >= 37) & (LG_16['GAME'] <= 72)]
LG_16_03 = LG_16[(LG_16['GAME'] >= 73) & (LG_16['GAME'] <= 108)]
LG_16_04 = LG_16[(LG_16['GAME'] >= 109) & (LG_16['GAME'] <= 144)]

# LG 2017년
LG_17_01 = LG_17[(LG_17['GAME'] >= 1) & (LG_17['GAME'] <= 36)]
LG_17_02 = LG_17[(LG_17['GAME'] >= 37) & (LG_17['GAME'] <= 72)]
LG_17_03 = LG_17[(LG_17['GAME'] >= 73) & (LG_17['GAME'] <= 108)]
LG_17_04 = LG_17[(LG_17['GAME'] >= 109) & (LG_17['GAME'] <= 144)]

# LG 2018년
LG_18_01 = LG_18[(LG_18['GAME'] >= 1) & (LG_18['GAME'] <= 36)]
LG_18_02 = LG_18[(LG_18['GAME'] >= 37) & (LG_18['GAME'] <= 72)]
LG_18_03 = LG_18[(LG_18['GAME'] >= 73) & (LG_18['GAME'] <= 108)]
LG_18_04 = LG_18[(LG_18['GAME'] >= 109) & (LG_18['GAME'] <= 144)]

# LG 2019년
LG_19_01 = LG_19[(LG_19['GAME'] >= 1) & (LG_19['GAME'] <= 36)]
LG_19_02 = LG_19[(LG_19['GAME'] >= 37) & (LG_19['GAME'] <= 72)]
LG_19_03 = LG_19[(LG_19['GAME'] >= 73) & (LG_19['GAME'] <= 108)]
LG_19_04 = LG_19[(LG_19['GAME'] >= 109) & (LG_19['GAME'] <= 144)]

# LG 2020년
LG_20_01 = LG_20[(LG_20['GAME'] >= 1) & (LG_20['GAME'] <= 36)]
LG_20_02 = LG_20[(LG_20['GAME'] >= 37) & (LG_20['GAME'] <= 72)]
LG_20_03 = LG_20[(LG_20['GAME'] >= 73) & (LG_20['GAME'] <= 108)]

del LG_16_01['GAME']
del LG_16_02['GAME']
del LG_16_03['GAME']
del LG_16_04['GAME']

del LG_17_01['GAME']
del LG_17_02['GAME']
del LG_17_03['GAME']
del LG_17_04['GAME']

del LG_18_01['GAME']
del LG_18_02['GAME']
del LG_18_03['GAME']
del LG_18_04['GAME']

del LG_19_01['GAME']
del LG_19_02['GAME']
del LG_19_03['GAME']
del LG_19_04['GAME']

del LG_20_01['GAME']
del LG_20_02['GAME']
del LG_20_03['GAME']

"""# LG 학습 데이터 구축"""

X = []
Y = []

for i in range(36):
  X.append(list(LG_16_01.iloc[i]))
  X.append(list(LG_16_02.iloc[i]))
  X.append(list(LG_16_03.iloc[i]))
  X.append(list(LG_17_01.iloc[i]))
  X.append(list(LG_17_02.iloc[i]))
  X.append(list(LG_17_03.iloc[i]))
  X.append(list(LG_18_01.iloc[i]))
  X.append(list(LG_18_02.iloc[i]))
  X.append(list(LG_18_03.iloc[i]))
  X.append(list(LG_19_01.iloc[i]))
  X.append(list(LG_19_02.iloc[i]))
  X.append(list(LG_19_03.iloc[i]))


for j in range(36):
  Y.append(list(LG_16_04.iloc[j]))
  Y.append(list(LG_17_04.iloc[j]))
  Y.append(list(LG_18_04.iloc[j]))
  Y.append(list(LG_19_04.iloc[j]))

X = np.array(X)
Y = np.array(Y)
X = X.reshape(144, 3, 6)
print(X.shape)
print(Y.shape)

"""# LSTM 모델 생성 및 컴파일"""

LG_model= tf.keras.Sequential([
  tf.keras.layers.LSTM(units = 30, return_sequences=True, input_shape=[3, 6]),
  tf.keras.layers.LSTM(units = 30),
  tf.keras.layers.Dropout(0.3),
  tf.keras.layers.Dense(6)
  ])

LG_model.compile(optimizer='rmsprop', loss='mse')   #'rmsprop'
LG_model.summary()

LG_history = LG_model.fit(X[:144], Y[:144], epochs = 60, batch_size = 40, validation_split=0.1)

import matplotlib.pyplot as plt
plt.plot(LG_history.history['loss'], 'b-', label = 'loss')
plt.plot(LG_history.history['val_loss'], 'r--', label = 'val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""# LG 모델 예측율 구하기"""

LG_model.evaluate(X[129:], Y[129:])
prediction = LG_model.predict(X[129:129+15])

for i in range(15):
  print(Y[129+i], '\t', prediction[i], '\tdiff:', abs(prediction[i] - Y[129 + i]))

prediction = LG_model.predict(X[129:])
fail = 0
for i in range(len(prediction)):
  for j in range(6):
    if abs(prediction[i][j] - Y[129+i][j]) > 0.06:
      fail += 1
print('correctness:', (129 - fail) / 129*100, '%')

"""# LG 모델 저장"""

LG_model.save('LG.h5')
LG_model = load_model('LG.h5')

"""# LG 예측 범위 구하기"""

LG_test = []

for i in range(36):
  LG_test.append(list(LG_20_01.iloc[i]))
  LG_test.append(list(LG_20_02.iloc[i]))
  LG_test.append(list(LG_20_03.iloc[i]))

LG_test = np.array(LG_test)
LG_test.shape

LG_test = LG_test.reshape(36 ,3, 6)

LG = LG_model.predict(LG_test)

# 과제 범위 기간 내 예측 값 출력 ['AB', 'RUN', 'HIT', 'INN2', 'R', 'ER']
LG[20:]

# 타율, 방어율, 득점&실점 예측하기
LG_AB = np.sum(LG[20:,0])
LG_HIT = np.sum(LG[20:,2])
LG_AVG = LG_HIT / LG_AB

LG_INN2 = np.sum(LG[20:,3])
LG_ER = np.sum(LG[20:,5])
LG_ERA = (LG_ER * 9) / (LG_INN2 / 3)

LG_total_RUN = np.sum(LG[20:,1]) * 100
LG_total_R = np.sum(LG[20:, 4]) * 100

print("LG 타율 값 : ", LG_AVG)
print("LG 방어율 값 : ", LG_ERA)
print("LG 득점 total : ", LG_total_RUN)
print("LG 실점 total : ", LG_total_R)

"""# SS 타율, 방어율, 승률 예측

# SS - 불필요한 Column 제거
"""

del SS_16['VS_T_ID']
del SS_16['T_ID']
del SS_16['GDAY_DS']

del SS_17['VS_T_ID']
del SS_17['T_ID']
del SS_17['GDAY_DS']

del SS_18['VS_T_ID']
del SS_18['T_ID']
del SS_18['GDAY_DS']

del SS_19['VS_T_ID']
del SS_19['T_ID']
del SS_19['GDAY_DS']

del SS_20['VS_T_ID']
del SS_20['T_ID']
del SS_20['GDAY_DS']

"""# SS - 게임 수로 데이터 쪼개기"""

# SS 2016년
SS_16_01 = SS_16[(SS_16['GAME'] >= 1) & (SS_16['GAME'] <= 36)]
SS_16_02 = SS_16[(SS_16['GAME'] >= 37) & (SS_16['GAME'] <= 72)]
SS_16_03 = SS_16[(SS_16['GAME'] >= 73) & (SS_16['GAME'] <= 108)]
SS_16_04 = SS_16[(SS_16['GAME'] >= 109) & (SS_16['GAME'] <= 144)]

# SS 2017년
SS_17_01 = SS_17[(SS_17['GAME'] >= 1) & (SS_17['GAME'] <= 36)]
SS_17_02 = SS_17[(SS_17['GAME'] >= 37) & (SS_17['GAME'] <= 72)]
SS_17_03 = SS_17[(SS_17['GAME'] >= 73) & (SS_17['GAME'] <= 108)]
SS_17_04 = SS_17[(SS_17['GAME'] >= 109) & (SS_17['GAME'] <= 144)]

# SS 2018년
SS_18_01 = SS_18[(SS_18['GAME'] >= 1) & (SS_18['GAME'] <= 36)]
SS_18_02 = SS_18[(SS_18['GAME'] >= 37) & (SS_18['GAME'] <= 72)]
SS_18_03 = SS_18[(SS_18['GAME'] >= 73) & (SS_18['GAME'] <= 108)]
SS_18_04 = SS_18[(SS_18['GAME'] >= 109) & (SS_18['GAME'] <= 144)]

# SS 2019년
SS_19_01 = SS_19[(SS_19['GAME'] >= 1) & (SS_19['GAME'] <= 36)]
SS_19_02 = SS_19[(SS_19['GAME'] >= 37) & (SS_19['GAME'] <= 72)]
SS_19_03 = SS_19[(SS_19['GAME'] >= 73) & (SS_19['GAME'] <= 108)]
SS_19_04 = SS_19[(SS_19['GAME'] >= 109) & (SS_19['GAME'] <= 144)]

# SS 2020년
SS_20_01 = SS_20[(SS_20['GAME'] >= 1) & (SS_20['GAME'] <= 36)]
SS_20_02 = SS_20[(SS_20['GAME'] >= 37) & (SS_20['GAME'] <= 72)]
SS_20_03 = SS_20[(SS_20['GAME'] >= 73) & (SS_20['GAME'] <= 108)]

del SS_16_01['GAME']
del SS_16_02['GAME']
del SS_16_03['GAME']
del SS_16_04['GAME']

del SS_17_01['GAME']
del SS_17_02['GAME']
del SS_17_03['GAME']
del SS_17_04['GAME']

del SS_18_01['GAME']
del SS_18_02['GAME']
del SS_18_03['GAME']
del SS_18_04['GAME']

del SS_19_01['GAME']
del SS_19_02['GAME']
del SS_19_03['GAME']
del SS_19_04['GAME']

del SS_20_01['GAME']
del SS_20_02['GAME']
del SS_20_03['GAME']

"""# SS 학습 데이터 구축"""

X = []
Y = []

for i in range(36):
  X.append(list(SS_16_01.iloc[i]))
  X.append(list(SS_16_02.iloc[i]))
  X.append(list(SS_16_03.iloc[i]))
  X.append(list(SS_17_01.iloc[i]))
  X.append(list(SS_17_02.iloc[i]))
  X.append(list(SS_17_03.iloc[i]))
  X.append(list(SS_18_01.iloc[i]))
  X.append(list(SS_18_02.iloc[i]))
  X.append(list(SS_18_03.iloc[i]))
  X.append(list(SS_19_01.iloc[i]))
  X.append(list(SS_19_02.iloc[i]))
  X.append(list(SS_19_03.iloc[i]))


for j in range(36):
  Y.append(list(SS_16_04.iloc[j]))
  Y.append(list(SS_17_04.iloc[j]))
  Y.append(list(SS_18_04.iloc[j]))
  Y.append(list(SS_19_04.iloc[j]))

X = np.array(X)
Y = np.array(Y)
X = X.reshape(144, 3, 6)
print(X.shape)
print(Y.shape)

"""# LSTM 모델 생성 및 컴파일"""

SS_model= tf.keras.Sequential([
  tf.keras.layers.LSTM(units = 30, return_sequences=True, input_shape=[3, 6]),
  tf.keras.layers.LSTM(units = 30),
  tf.keras.layers.Dropout(0.3),
  tf.keras.layers.Dense(6)
  ])

SS_model.compile(optimizer='rmsprop', loss='mse')   #'rmsprop'
SS_model.summary()

SS_history = SS_model.fit(X[:144], Y[:144], epochs = 60, batch_size = 40, validation_split=0.1)

import matplotlib.pyplot as plt
plt.plot(SS_history.history['loss'], 'b-', label = 'loss')
plt.plot(SS_history.history['val_loss'], 'r--', label = 'val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""# SS 모델 예측율 구하기"""

SS_model.evaluate(X[129:], Y[129:])
prediction = SS_model.predict(X[129:129+15])

for i in range(15):
  print(Y[129+i], '\t', prediction[i], '\tdiff:', abs(prediction[i] - Y[129 + i]))

prediction = SS_model.predict(X[129:])
fail = 0
for i in range(len(prediction)):
  for j in range(6):
    if abs(prediction[i][j] - Y[129+i][j]) > 0.1:
      fail += 1
print('correctness:', (129 - fail) / 129*100, '%')

"""# SS 모델 저장"""

SS_model.save('SS.h5')
SS_model = load_model('SS.h5')

"""# SS 예측 범위 구하기"""

SS_test = []

for i in range(36):
  SS_test.append(list(SS_20_01.iloc[i]))
  SS_test.append(list(SS_20_02.iloc[i]))
  SS_test.append(list(SS_20_03.iloc[i]))

SS_test = np.array(SS_test)
SS_test.shape

SS_test = SS_test.reshape(36 ,3, 6)

SS = SS_model.predict(SS_test)

# 과제 범위 기간 내 예측 값 출력 ['AB', 'RUN', 'HIT', 'INN2', 'R', 'ER']
SS[20:]

# 타율, 방어율, 득점&실점 예측하기
SS_AB = np.sum(SS[20:,0])
SS_HIT = np.sum(SS[20:,2])
SS_AVG = SS_HIT / SS_AB

SS_INN2 = np.sum(SS[20:,3])
SS_ER = np.sum(SS[20:,5])
SS_ERA = (SS_ER * 9) / (SS_INN2 / 3)

SS_total_RUN = np.sum(SS[20:,1]) * 100
SS_total_R = np.sum(SS[20:, 4]) * 100

print("삼성 타율 값 : ", SS_AVG)
print("삼성 방어율 값 : ", SS_ERA)
print("삼성 득점 total : ", SS_total_RUN)
print("삼성 실점 total : ", SS_total_R)

"""# SK 타율, 방어율, 승률 예측

# SK - 불필요한 Column 제거
"""

del SK_16['VS_T_ID']
del SK_16['T_ID']
del SK_16['GDAY_DS']

del SK_17['VS_T_ID']
del SK_17['T_ID']
del SK_17['GDAY_DS']

del SK_18['VS_T_ID']
del SK_18['T_ID']
del SK_18['GDAY_DS']

del SK_19['VS_T_ID']
del SK_19['T_ID']
del SK_19['GDAY_DS']

del SK_20['VS_T_ID']
del SK_20['T_ID']
del SK_20['GDAY_DS']

"""# SK - 게임 수로 데이터 쪼개기"""

# SK 2016년
SK_16_01 = SK_16[(SK_16['GAME'] >= 1) & (SK_16['GAME'] <= 36)]
SK_16_02 = SK_16[(SK_16['GAME'] >= 37) & (SK_16['GAME'] <= 72)]
SK_16_03 = SK_16[(SK_16['GAME'] >= 73) & (SK_16['GAME'] <= 108)]
SK_16_04 = SK_16[(SK_16['GAME'] >= 109) & (SK_16['GAME'] <= 144)]

# SK 2017년
SK_17_01 = SK_17[(SK_17['GAME'] >= 1) & (SK_17['GAME'] <= 36)]
SK_17_02 = SK_17[(SK_17['GAME'] >= 37) & (SK_17['GAME'] <= 72)]
SK_17_03 = SK_17[(SK_17['GAME'] >= 73) & (SK_17['GAME'] <= 108)]
SK_17_04 = SK_17[(SK_17['GAME'] >= 109) & (SK_17['GAME'] <= 144)]

# SK 2018년
SK_18_01 = SK_18[(SK_18['GAME'] >= 1) & (SK_18['GAME'] <= 36)]
SK_18_02 = SK_18[(SK_18['GAME'] >= 37) & (SK_18['GAME'] <= 72)]
SK_18_03 = SK_18[(SK_18['GAME'] >= 73) & (SK_18['GAME'] <= 108)]
SK_18_04 = SK_18[(SK_18['GAME'] >= 109) & (SK_18['GAME'] <= 144)]

# SK 2019년
SK_19_01 = SK_19[(SK_19['GAME'] >= 1) & (SK_19['GAME'] <= 36)]
SK_19_02 = SK_19[(SK_19['GAME'] >= 37) & (SK_19['GAME'] <= 72)]
SK_19_03 = SK_19[(SK_19['GAME'] >= 73) & (SK_19['GAME'] <= 108)]
SK_19_04 = SK_19[(SK_19['GAME'] >= 109) & (SK_19['GAME'] <= 144)]

# SK 2020년
SK_20_01 = SK_20[(SK_20['GAME'] >= 1) & (SK_20['GAME'] <= 36)]
SK_20_02 = SK_20[(SK_20['GAME'] >= 37) & (SK_20['GAME'] <= 72)]
SK_20_03 = SK_20[(SK_20['GAME'] >= 73) & (SK_20['GAME'] <= 108)]

del SK_16_01['GAME']
del SK_16_02['GAME']
del SK_16_03['GAME']
del SK_16_04['GAME']

del SK_17_01['GAME']
del SK_17_02['GAME']
del SK_17_03['GAME']
del SK_17_04['GAME']

del SK_18_01['GAME']
del SK_18_02['GAME']
del SK_18_03['GAME']
del SK_18_04['GAME']

del SK_19_01['GAME']
del SK_19_02['GAME']
del SK_19_03['GAME']
del SK_19_04['GAME']

del SK_20_01['GAME']
del SK_20_02['GAME']
del SK_20_03['GAME']

"""# SK 학습 데이터 구축"""

X = []
Y = []

for i in range(36):
  X.append(list(SK_16_01.iloc[i]))
  X.append(list(SK_16_02.iloc[i]))
  X.append(list(SK_16_03.iloc[i]))
  X.append(list(SK_17_01.iloc[i]))
  X.append(list(SK_17_02.iloc[i]))
  X.append(list(SK_17_03.iloc[i]))
  X.append(list(SK_18_01.iloc[i]))
  X.append(list(SK_18_02.iloc[i]))
  X.append(list(SK_18_03.iloc[i]))
  X.append(list(SK_19_01.iloc[i]))
  X.append(list(SK_19_02.iloc[i]))
  X.append(list(SK_19_03.iloc[i]))


for j in range(36):
  Y.append(list(SK_16_04.iloc[j]))
  Y.append(list(SK_17_04.iloc[j]))
  Y.append(list(SK_18_04.iloc[j]))
  Y.append(list(SK_19_04.iloc[j]))

X = np.array(X)
Y = np.array(Y)
X = X.reshape(144, 3, 6)
print(X.shape)
print(Y.shape)

"""# LSTM 모델 생성 및 컴파일"""

SK_model= tf.keras.Sequential([
  tf.keras.layers.LSTM(units = 30, return_sequences=True, input_shape=[3, 6]),
  tf.keras.layers.LSTM(units = 30),
  tf.keras.layers.Dropout(0.3),
  tf.keras.layers.Dense(6)
  ])

SK_model.compile(optimizer='rmsprop', loss='mse')   #'rmsprop'
SK_model.summary()

SK_history = SK_model.fit(X[:144], Y[:144], epochs = 60, batch_size = 40, validation_split=0.1)

import matplotlib.pyplot as plt
plt.plot(SK_history.history['loss'], 'b-', label = 'loss')
plt.plot(SK_history.history['val_loss'], 'r--', label = 'val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""# SK 모델 예측율 구하기"""

SK_model.evaluate(X[129:], Y[129:])
prediction = SK_model.predict(X[129:129+15])

for i in range(15):
  print(Y[129+i], '\t', prediction[i], '\tdiff:', abs(prediction[i] - Y[129 + i]))

prediction = SK_model.predict(X[129:])
fail = 0
for i in range(len(prediction)):
  for j in range(6):
    if abs(prediction[i][j] - Y[129+i][j]) > 0.06:
      fail += 1
print('correctness:', (129 - fail) / 129*100, '%')

"""# SK 모델 저장"""

SK_model.save('SK.h5')
SK_model = load_model('SK.h5')

"""# SK 예측 범위 구하기"""

SK_test = []

for i in range(36):
  SK_test.append(list(SK_20_01.iloc[i]))
  SK_test.append(list(SK_20_02.iloc[i]))
  SK_test.append(list(SK_20_03.iloc[i]))

SK_test = np.array(SK_test)
SK_test.shape

SK_test = SK_test.reshape(36 ,3, 6)

SK = SK_model.predict(SK_test)

# 과제 범위 기간 내 예측 값 출력 ['AB', 'RUN', 'HIT', 'INN2', 'R', 'ER']
SK[18:]

# 타율, 방어율, 득점&실점 예측하기
SK_AB = np.sum(SK[18:,0])
SK_HIT = np.sum(SK[18:,2])
SK_AVG = SK_HIT / SK_AB

SK_INN2 = np.sum(SK[18:,3])
SK_ER = np.sum(SK[18:,5])
SK_ERA = (SK_ER * 9) / (SK_INN2 / 3)

SK_total_RUN = np.sum(SK[18:,1]) * 100
SK_total_R = np.sum(SK[18:, 4]) * 100

print("SK 타율 값 : ", SK_AVG)
print("SK 방어율 값 : ", SK_ERA)
print("SK 득점 total : ", SK_total_RUN)
print("SK 실점 total : ", SK_total_R)

"""# HH 타율, 방어율, 승률 예측

# HH - 불필요한 Column 제거
"""

del HH_16['VS_T_ID']
del HH_16['T_ID']
del HH_16['GDAY_DS']

del HH_17['VS_T_ID']
del HH_17['T_ID']
del HH_17['GDAY_DS']

del HH_18['VS_T_ID']
del HH_18['T_ID']
del HH_18['GDAY_DS']

del HH_19['VS_T_ID']
del HH_19['T_ID']
del HH_19['GDAY_DS']

del HH_20['VS_T_ID']
del HH_20['T_ID']
del HH_20['GDAY_DS']

"""# HH - 게임 수로 데이터 쪼개기"""

# HH 2016년
HH_16_01 = HH_16[(HH_16['GAME'] >= 1) & (HH_16['GAME'] <= 36)]
HH_16_02 = HH_16[(HH_16['GAME'] >= 37) & (HH_16['GAME'] <= 72)]
HH_16_03 = HH_16[(HH_16['GAME'] >= 73) & (HH_16['GAME'] <= 108)]
HH_16_04 = HH_16[(HH_16['GAME'] >= 109) & (HH_16['GAME'] <= 144)]

# HH 2017년
HH_17_01 = HH_17[(HH_17['GAME'] >= 1) & (HH_17['GAME'] <= 36)]
HH_17_02 = HH_17[(HH_17['GAME'] >= 37) & (HH_17['GAME'] <= 72)]
HH_17_03 = HH_17[(HH_17['GAME'] >= 73) & (HH_17['GAME'] <= 108)]
HH_17_04 = HH_17[(HH_17['GAME'] >= 109) & (HH_17['GAME'] <= 144)]

# HH 2018년
HH_18_01 = HH_18[(HH_18['GAME'] >= 1) & (HH_18['GAME'] <= 36)]
HH_18_02 = HH_18[(HH_18['GAME'] >= 37) & (HH_18['GAME'] <= 72)]
HH_18_03 = HH_18[(HH_18['GAME'] >= 73) & (HH_18['GAME'] <= 108)]
HH_18_04 = HH_18[(HH_18['GAME'] >= 109) & (HH_18['GAME'] <= 144)]

# HH 2019년
HH_19_01 = HH_19[(HH_19['GAME'] >= 1) & (HH_19['GAME'] <= 36)]
HH_19_02 = HH_19[(HH_19['GAME'] >= 37) & (HH_19['GAME'] <= 72)]
HH_19_03 = HH_19[(HH_19['GAME'] >= 73) & (HH_19['GAME'] <= 108)]
HH_19_04 = HH_19[(HH_19['GAME'] >= 109) & (HH_19['GAME'] <= 144)]

# HH 2020년
HH_20_01 = HH_20[(HH_20['GAME'] >= 1) & (HH_20['GAME'] <= 36)]
HH_20_02 = HH_20[(HH_20['GAME'] >= 37) & (HH_20['GAME'] <= 72)]
HH_20_03 = HH_20[(HH_20['GAME'] >= 73) & (HH_20['GAME'] <= 108)]

del HH_16_01['GAME']
del HH_16_02['GAME']
del HH_16_03['GAME']
del HH_16_04['GAME']

del HH_17_01['GAME']
del HH_17_02['GAME']
del HH_17_03['GAME']
del HH_17_04['GAME']

del HH_18_01['GAME']
del HH_18_02['GAME']
del HH_18_03['GAME']
del HH_18_04['GAME']

del HH_19_01['GAME']
del HH_19_02['GAME']
del HH_19_03['GAME']
del HH_19_04['GAME']

del HH_20_01['GAME']
del HH_20_02['GAME']
del HH_20_03['GAME']

"""# HH 학습 데이터 구축"""

X = []
Y = []

for i in range(36):
  X.append(list(HH_16_01.iloc[i]))
  X.append(list(HH_16_02.iloc[i]))
  X.append(list(HH_16_03.iloc[i]))
  X.append(list(HH_17_01.iloc[i]))
  X.append(list(HH_17_02.iloc[i]))
  X.append(list(HH_17_03.iloc[i]))
  X.append(list(HH_18_01.iloc[i]))
  X.append(list(HH_18_02.iloc[i]))
  X.append(list(HH_18_03.iloc[i]))
  X.append(list(HH_19_01.iloc[i]))
  X.append(list(HH_19_02.iloc[i]))
  X.append(list(HH_19_03.iloc[i]))


for j in range(36):
  Y.append(list(HH_16_04.iloc[j]))
  Y.append(list(HH_17_04.iloc[j]))
  Y.append(list(HH_18_04.iloc[j]))
  Y.append(list(HH_19_04.iloc[j]))

X = np.array(X)
Y = np.array(Y)
X = X.reshape(144, 3, 6)
print(X.shape)
print(Y.shape)

"""# LSTM 모델 생성 및 컴파일"""

HH_model= tf.keras.Sequential([
  tf.keras.layers.LSTM(units = 30, return_sequences=True, input_shape=[3, 6]),
  tf.keras.layers.LSTM(units = 30),
  tf.keras.layers.Dropout(0.3),
  tf.keras.layers.Dense(6)
  ])

HH_model.compile(optimizer='rmsprop', loss='mse')   #'rmsprop'
HH_model.summary()

HH_history = HH_model.fit(X[:144], Y[:144], epochs = 60, batch_size = 40, validation_split=0.1)

import matplotlib.pyplot as plt
plt.plot(HH_history.history['loss'], 'b-', label = 'loss')
plt.plot(HH_history.history['val_loss'], 'r--', label = 'val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""# HH 모델 예측율 구하기"""

HH_model.evaluate(X[129:], Y[129:])
prediction = HH_model.predict(X[129:129+15])

for i in range(15):
  print(Y[129+i], '\t', prediction[i], '\tdiff:', abs(prediction[i] - Y[129 + i]))

prediction = HH_model.predict(X[129:])
fail = 0
for i in range(len(prediction)):
  for j in range(6):
    if abs(prediction[i][j] - Y[129+i][j]) > 0.1:
      fail += 1
print('correctness:', (129 - fail) / 129*100, '%')

"""# HH 모델 저장"""

HH_model.save('HH.h5')
HH_model = load_model('HH.h5')

"""# HH 예측 범위 구하기"""

HH_test = []

for i in range(36):
  HH_test.append(list(HH_20_01.iloc[i]))
  HH_test.append(list(HH_20_02.iloc[i]))
  HH_test.append(list(HH_20_03.iloc[i]))

HH_test = np.array(HH_test)
HH_test.shape

HH_test = HH_test.reshape(36 ,3, 6)

HH = HH_model.predict(HH_test)

# 과제 범위 기간 내 예측 값 출력 ['AB', 'RUN', 'HIT', 'INN2', 'R', 'ER']
HH[20:]

# 타율, 방어율, 득점&실점 예측하기
HH_AB = np.sum(HH[20:,0])
HH_HIT = np.sum(HH[20:,2])
HH_AVG = HH_HIT / HH_AB

HH_INN2 = np.sum(HH[20:,3])
HH_ER = np.sum(HH[20:,5])
HH_ERA = (HH_ER * 9) / (HH_INN2 / 3)

HH_total_RUN = np.sum(HH[20:,1]) * 100
HH_total_R = np.sum(HH[20:, 4]) * 100

print("한화 타율 값 : ", HH_AVG)
print("한화 방어율 값 : ", HH_ERA)
print("한화 득점 total : ", HH_total_RUN)
print("한화 실점 total : ", HH_total_R)

"""# HT 타율, 방어율, 승률 예측

# HT - 불필요한 Column 제거
"""

del HT_16['VS_T_ID']
del HT_16['T_ID']
del HT_16['GDAY_DS']

del HT_17['VS_T_ID']
del HT_17['T_ID']
del HT_17['GDAY_DS']

del HT_18['VS_T_ID']
del HT_18['T_ID']
del HT_18['GDAY_DS']

del HT_19['VS_T_ID']
del HT_19['T_ID']
del HT_19['GDAY_DS']

del HT_20['VS_T_ID']
del HT_20['T_ID']
del HT_20['GDAY_DS']

"""# HT - 게임 수로 데이터 쪼개기"""

# HT 2016년
HT_16_01 = HT_16[(HT_16['GAME'] >= 1) & (HT_16['GAME'] <= 36)]
HT_16_02 = HT_16[(HT_16['GAME'] >= 37) & (HT_16['GAME'] <= 72)]
HT_16_03 = HT_16[(HT_16['GAME'] >= 73) & (HT_16['GAME'] <= 108)]
HT_16_04 = HT_16[(HT_16['GAME'] >= 109) & (HT_16['GAME'] <= 144)]

# HT 2017년
HT_17_01 = HT_17[(HT_17['GAME'] >= 1) & (HT_17['GAME'] <= 36)]
HT_17_02 = HT_17[(HT_17['GAME'] >= 37) & (HT_17['GAME'] <= 72)]
HT_17_03 = HT_17[(HT_17['GAME'] >= 73) & (HT_17['GAME'] <= 108)]
HT_17_04 = HT_17[(HT_17['GAME'] >= 109) & (HT_17['GAME'] <= 144)]

# HT 2018년
HT_18_01 = HT_18[(HT_18['GAME'] >= 1) & (HT_18['GAME'] <= 36)]
HT_18_02 = HT_18[(HT_18['GAME'] >= 37) & (HT_18['GAME'] <= 72)]
HT_18_03 = HT_18[(HT_18['GAME'] >= 73) & (HT_18['GAME'] <= 108)]
HT_18_04 = HT_18[(HT_18['GAME'] >= 109) & (HT_18['GAME'] <= 144)]

# HT 2019년
HT_19_01 = HT_19[(HT_19['GAME'] >= 1) & (HT_19['GAME'] <= 36)]
HT_19_02 = HT_19[(HT_19['GAME'] >= 37) & (HT_19['GAME'] <= 72)]
HT_19_03 = HT_19[(HT_19['GAME'] >= 73) & (HT_19['GAME'] <= 108)]
HT_19_04 = HT_19[(HT_19['GAME'] >= 109) & (HT_19['GAME'] <= 144)]

# HT 2020년
HT_20_01 = HT_20[(HT_20['GAME'] >= 1) & (HT_20['GAME'] <= 36)]
HT_20_02 = HT_20[(HT_20['GAME'] >= 37) & (HT_20['GAME'] <= 72)]
HT_20_03 = HT_20[(HT_20['GAME'] >= 73) & (HT_20['GAME'] <= 108)]

del HT_16_01['GAME']
del HT_16_02['GAME']
del HT_16_03['GAME']
del HT_16_04['GAME']

del HT_17_01['GAME']
del HT_17_02['GAME']
del HT_17_03['GAME']
del HT_17_04['GAME']

del HT_18_01['GAME']
del HT_18_02['GAME']
del HT_18_03['GAME']
del HT_18_04['GAME']

del HT_19_01['GAME']
del HT_19_02['GAME']
del HT_19_03['GAME']
del HT_19_04['GAME']

del HT_20_01['GAME']
del HT_20_02['GAME']
del HT_20_03['GAME']

"""# HT 학습 데이터 구축"""

X = []
Y = []

for i in range(36):
  X.append(list(HT_16_01.iloc[i]))
  X.append(list(HT_16_02.iloc[i]))
  X.append(list(HT_16_03.iloc[i]))
  X.append(list(HT_17_01.iloc[i]))
  X.append(list(HT_17_02.iloc[i]))
  X.append(list(HT_17_03.iloc[i]))
  X.append(list(HT_18_01.iloc[i]))
  X.append(list(HT_18_02.iloc[i]))
  X.append(list(HT_18_03.iloc[i]))
  X.append(list(HT_19_01.iloc[i]))
  X.append(list(HT_19_02.iloc[i]))
  X.append(list(HT_19_03.iloc[i]))


for j in range(36):
  Y.append(list(HT_16_04.iloc[j]))
  Y.append(list(HT_17_04.iloc[j]))
  Y.append(list(HT_18_04.iloc[j]))
  Y.append(list(HT_19_04.iloc[j]))

X = np.array(X)
Y = np.array(Y)
X = X.reshape(144, 3, 6)
print(X.shape)
print(Y.shape)

"""# LSTM 모델 생성 및 컴파일"""

HT_model= tf.keras.Sequential([
  tf.keras.layers.LSTM(units = 30, return_sequences=True, input_shape=[3, 6]),
  tf.keras.layers.LSTM(units = 30),
  tf.keras.layers.Dropout(0.3),
  tf.keras.layers.Dense(6)
  ])

HT_model.compile(optimizer='rmsprop', loss='mse')   #'rmsprop'
HT_model.summary()

HT_history = HT_model.fit(X[:144], Y[:144], epochs = 60, batch_size = 40, validation_split=0.1)

import matplotlib.pyplot as plt
plt.plot(HT_history.history['loss'], 'b-', label = 'loss')
plt.plot(HT_history.history['val_loss'], 'r--', label = 'val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

"""# HT 모델 예측율 구하기"""

HT_model.evaluate(X[129:], Y[129:])
prediction = HT_model.predict(X[129:129+15])

for i in range(15):
  print(Y[129+i], '\t', prediction[i], '\tdiff:', abs(prediction[i] - Y[129 + i]))

prediction = HT_model.predict(X[129:])
fail = 0
for i in range(len(prediction)):
  for j in range(6):
    if abs(prediction[i][j] - Y[129+i][j]) > 0.1:
      fail += 1
print('correctness:', (129 - fail) / 129*100, '%')

"""# HT 모델 저장"""

HT_model.save('HT.h5')
HT_model = load_model('HT.h5')

"""# HT 예측 범위 구하기"""

HT_test = []

for i in range(36):
  HT_test.append(list(HT_20_01.iloc[i]))
  HT_test.append(list(HT_20_02.iloc[i]))
  HT_test.append(list(HT_20_03.iloc[i]))

HT_test = np.array(HT_test)
HT_test.shape

HT_test = HT_test.reshape(36 ,3, 6)

HT = HT_model.predict(HT_test)

# 과제 범위 기간 내 예측 값 출력 ['AB', 'RUN', 'HIT', 'INN2', 'R', 'ER']
HT[19:]

# 타율, 방어율, 득점&실점 예측하기
HT_AB = np.sum(HT[19:,0])
HT_HIT = np.sum(HT[19:,2])
HT_AVG = HT_HIT / HT_AB

HT_INN2 = np.sum(HT[19:,3])
HT_ER = np.sum(HT[19:,5])
HT_ERA = (HT_ER * 9) / (HT_INN2 / 3)

HT_total_RUN = np.sum(HT[19:,1]) * 100
HT_total_R = np.sum(HT[19:, 4]) * 100

print("KIA 타율 값 : ", HT_AVG)
print("KIA 방어율 값 : ", HT_ERA)
print("KIA 득점 total : ", HT_total_RUN)
print("KIA 실점 total : ", HT_total_R)